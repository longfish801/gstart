#! clmap gstart

#> dec
	import io.github.longfish801.gstart.guiparts.dialog.FxDialog;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
#> prefix
	Logger LOG = LoggerFactory.getLogger('io.github.longfish801');

#> map gstart
#>> dec
	import javafx.application.Platform;
#>> closure start
	if (args != null && args.size() > 0){	// コマンドライン引数を指定された場合
		try {
			// スクリプトへのパスとみなして実行します
			for (String arg in args){
				LOG.info('スクリプトを実行します。path={}', arg);
				funcs['taskexecutor'].runAsync(new File(arg));
			}
			// すべてのスクリプト実行が終わるまで、１秒間隔で待ちます
			while (funcs['taskexecutor'].taskList.size() > 0) Thread.sleep(1000);
		} catch (Throwable exc){
			LOG.error('コマンドラインで指定されたスクリプトの実行時に問題が発生しました。', exc);
		} finally {
			clmap.cl('gstart#stop').call();
		}
	} else {
		// トレイアイコンを開始します
		funcs['traylauncher'].show();
		// スクリプト実行コンソールを表示します
		// funcs['scriptconsole'].show();
	}
#>> closure stop
	try {
		// トレイアイコンを終了します
		funcs['traylauncher'].close();
		// スクリプト実行コンソールを終了します
		funcs['scriptconsole'].close();
	} catch (exc){
		LOG.error('機能の停止時に問題が発生しました。', exc);
	} finally {
		// JavaFXアプリケーションスレッドを停止します
		Platform.exit();
		LOG.info('Gstartを終了します。');
	}
#>> closure reload
	// トレイアイコンを再読込します
	funcs['traylauncher'].reload();
	// スクリプト実行コンソールを再読込します
	funcs['scriptconsole'].reload();

#> map menu
#>> dec
	import java.awt.Desktop;
	import io.github.longfish801.gstart.util.ClassConfig;
#>> closure showconsole
	// スクリプト実行コンソールを表示します
	funcs['scriptconsole'].show();
#>> closure stopconsole
	if (funcs['traylauncher'].isShow()){
		// スクリプト実行コンソールを終了します
		funcs['scriptconsole'].close();
	} else {
		// gstartを終了します
		clmap.cl('gstart#stop').call();
	}
#>> closure help
	// Gstartのサイトを開きます
	Desktop.getDesktop().browse(new URI('https://longfish801.github.io/gstart/'));
#>> closure open
	// カレントフォルダを開きます
	File curDir = new File(new File('.').getCanonicalPath());
	Desktop.getDesktop().open(curDir);
#>> closure log
	// ログファイルを参照します
	File logFile = new File(new File('log'), 'app.log');
	Desktop.getDesktop().open(logFile);
#>> closure appdir
	// 設定値格納フォルダを参照します
	Desktop.getDesktop().open(ClassConfig.rootDir);
#>> closure version
	// バージョン情報を表示します
	FxDialog.alertInformation(new File('conf/version.txt').text);

#> map task
#>> dec
	import io.github.longfish801.gstart.taskexecutor.notice.NoticeTask;
#>> args
	NoticeTask task
#>> closure exception
	LOG.error('タスク実行中に例外が発生しました。sign={}', task.sign, task.exc);
	FxDialog.exceptionDialog("タスク（${task.sign}）実行中に例外が発生しました。", task.exc);

#> map script
#>> dec
	import io.github.longfish801.gstart.util.SystemEditor;
	import io.github.longfish801.gstart.scriptconsole.MyGroovyConsole;
#>> args
	File file
#>> closure run
	// 指定されたファイルをスクリプトファイルとみなして非同期実行します
	funcs['taskexecutor'].runAsync(file);
#>> closure editor
	// 指定されたファイルをエディタで開きます
	SystemEditor.exec(file);
#>> closure console
	// 指定されたファイルを GroovyConsoleで開きます
	MyGroovyConsole.exec(file);

#> map scriptconsole
#>> dec
	import io.github.longfish801.gstart.scriptconsole.ScriptConsole;
#>> args
	String combi, ScriptConsole console
#>> closure
	switch (combi){
		case ~/^script#.*$/:	// スクリプトツリーで選択されたスクリプトに対する操作です
			if (console.scriptTree.selectionModel.empty){
				FxDialog.alertWarning('対象スクリプトが選択されていません。');
			} else {
				clmap.cl(combi).call(console.scriptTree.selectionModel.selectedItem.value.file);
			}
			break;
		default:	// 上記以外で、引数を必要としない処理を実行します
			clmap.cl(combi).call();
	}

#> map traylauncher
#>> dec
	import io.github.longfish801.gstart.traylauncher.TrayLauncher;
#>> args
	String combi, TrayLauncher launcher
#>> closure
	switch (combi){
		case ~/^script#.*$/:	// スクリプトツリーで選択されたスクリプトに対する操作です
			clmap.cl(combi).call(launcher.selectedScript);
			break;
		default:	// 上記以外で、引数を必要としない処理を実行します
			clmap.cl(combi).call();
	}
